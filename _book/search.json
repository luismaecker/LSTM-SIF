[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Forecasting SIF with climatic drivers",
    "section": "",
    "text": "Preface\nThis is a Quarto book.\nTo learn more about Quarto books visit https://quarto.org/docs/books."
  },
  {
    "objectID": "quarto_book/intro.html",
    "href": "quarto_book/intro.html",
    "title": "1  Introduction",
    "section": "",
    "text": "This is a book created from markdown and executable code.\nSee Knuth (1984) for additional discussion of literate programming.\n\n\nCode\n1+1\n\n\n2\n\n\n\n# Download and preprocess Corine data\ndef load_corine(path, region, download=True):\n\n    print(\"Processing Corine data...\")\n\n    landcover_collection = ee.ImageCollection('COPERNICUS/CORINE/V20/100m')\n\n    landcover_year = landcover_collection.filterDate(f'1999-01-01', f'2000-12-31').first()\n\n    zones = ee.Image(0) \\\n        .where(landcover_year.eq(311), 311) \\\n        .where(landcover_year.eq(312), 312) \\\n        .where(landcover_year.eq(313), 313)\n\n    print(\"Downloading Corine data\")\n\n    if download:\n        geemap.ee_export_image(zones, filename=path, crs=\"EPSG:4326\", scale=500, region=region)\n\n    print(100 * \"-\")\n\n\n# Create sif sample tif for spatial resolution and transform\ndef create_sif_sample(out_path, cube_subset, write=True):\n\n    cube_sample = cube_subset[\"sif_gosif\"].isel(time=0)\n\n    if write:\n        cube_sample.rio.to_raster(out_path)\n\n    print(\"Sample path created at:\", out_path)\n\n    print(100 * \"-\")\n\n\n\n# Main workflow function\ndef load_aux_data(data_path, cube_subset, download = True):\n\n    # Initialize GEE\n    initialize_gee()\n\n    # Create file paths and if they dont exist folders\n    germany_shp_path, corine_file_path, tif_sample_path, _, _ = create_paths(data_path=data_path)\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "quarto_book/references.html",
    "href": "quarto_book/references.html",
    "title": "References",
    "section": "",
    "text": "Knuth, Donald E. 1984. “Literate Programming.” Comput.\nJ. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "quarto_book/intro.html#section",
    "href": "quarto_book/intro.html#section",
    "title": "1  Downloading Auxillary data",
    "section": "1.1 ",
    "text": "1.1 \n\n# Download and preprocess Corine data\ndef load_corine(path, region, download=True):\n\n    print(\"Processing Corine data...\")\n\n    landcover_collection = ee.ImageCollection('COPERNICUS/CORINE/V20/100m')\n\n    landcover_year = landcover_collection.filterDate(f'1999-01-01', f'2000-12-31').first()\n\n    zones = ee.Image(0) \\\n        .where(landcover_year.eq(311), 311) \\\n        .where(landcover_year.eq(312), 312) \\\n        .where(landcover_year.eq(313), 313)\n\n    print(\"Downloading Corine data\")\n\n    if download:\n        geemap.ee_export_image(zones, filename=path, crs=\"EPSG:4326\", scale=500, region=region)\n\n    print(100 * \"-\")\n\n\n# Create sif sample tif for spatial resolution and transform\ndef create_sif_sample(out_path, cube_subset, write=True):\n\n    cube_sample = cube_subset[\"sif_gosif\"].isel(time=0)\n\n    if write:\n        cube_sample.rio.to_raster(out_path)\n\n    print(\"Sample path created at:\", out_path)\n\n    print(100 * \"-\")\n\n\n\n# Main workflow function\ndef load_aux_data(data_path, cube_subset, download = True):\n\n    # Initialize GEE\n    initialize_gee()\n\n    # Create file paths and if they dont exist folders\n    germany_shp_path, corine_file_path, tif_sample_path, _, _ = create_paths(data_path=data_path)\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "quarto_book/intro.html#function-to-initalize-gee",
    "href": "quarto_book/intro.html#function-to-initalize-gee",
    "title": "1  Downloading Auxillary data",
    "section": "1.1 Function to initalize GEE",
    "text": "1.1 Function to initalize GEE\ndef initialize_gee():\n    ee.Authenticate(force=False)\n    ee.Initialize(opt_url='https://earthengine-highvolume.googleapis.com', project='ee-forest-health')"
  },
  {
    "objectID": "quarto_book/intro.html#function-to-download-the-corine-lc-100m-data-for-year-2000",
    "href": "quarto_book/intro.html#function-to-download-the-corine-lc-100m-data-for-year-2000",
    "title": "1  Downloading Auxillary data",
    "section": "1.2 Function to download the Corine LC 100m data for year 2000",
    "text": "1.2 Function to download the Corine LC 100m data for year 2000\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "quarto_book/intro.html#function-to-download-the-corine-lc-100m-data",
    "href": "quarto_book/intro.html#function-to-download-the-corine-lc-100m-data",
    "title": "1  Downloading Auxillary data",
    "section": "1.3 Function to download the Corine LC 100m data",
    "text": "1.3 Function to download the Corine LC 100m data\nThis function will download the Corine LC 100m data for the year 2000 from google earth engine. Only forest classes are retained: - 311: Decidous forest - 312: Coniferous forest - 313: Mixed forest\ndef download_german_border(path, download=False):\n\n    print(\"Downloading German border data...\")\n\n    germany = ee.FeatureCollection('FAO/GAUL/2015/level0').filter(ee.Filter.eq('ADM0_NAME', 'Germany'))\n       \n    germany_geometry = germany.geometry()\n\n    if download:\n        geemap.ee_export_vector(germany, filename=path)\n\n    print(100 * \"-\")\n\n    return germany_geometry"
  },
  {
    "objectID": "quarto_book/intro.html#function",
    "href": "quarto_book/intro.html#function",
    "title": "1  Downloading Auxillary data",
    "section": "1.3 Function",
    "text": "1.3 Function\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "quarto_book/intro.html#function-to-download-german-border-data",
    "href": "quarto_book/intro.html#function-to-download-german-border-data",
    "title": "1  Downloading Auxillary data",
    "section": "1.2 Function to Download German border data",
    "text": "1.2 Function to Download German border data\nThis function will download a shapefile delineating the german border, from google earth engine.\n# Download German border data\ndef download_german_border(path, download=False):\n\n    print(\"Downloading German border data...\")\n\n    germany = ee.FeatureCollection('FAO/GAUL/2015/level0').filter(ee.Filter.eq('ADM0_NAME', 'Germany'))\n       \n    germany_geometry = germany.geometry()\n\n    if download:\n        geemap.ee_export_vector(germany, filename=path)\n\n    print(100 * \"-\")\n\n    return germany_geometry"
  },
  {
    "objectID": "quarto_book/intro.html#function-to-create-a-sif-sample-tif",
    "href": "quarto_book/intro.html#function-to-create-a-sif-sample-tif",
    "title": "1  Downloading Auxillary data",
    "section": "1.4 Function to create a sif sample tif",
    "text": "1.4 Function to create a sif sample tif\nThis tif will late be used as a reference for the cube spatial grid and transform\n# Create sif sample tif for spatial resolution and transform\ndef create_sif_sample(out_path, cube_subset, write=True):\n\n    cube_sample = cube_subset[\"sif_gosif\"].isel(time=0)\n\n    if write:\n        cube_sample.rio.to_raster(out_path)\n\n    print(\"Sample path created at:\", out_path)\n\n    print(100 * \"-\")"
  },
  {
    "objectID": "quarto_book/intro.html#compiling-all-functions-into-one",
    "href": "quarto_book/intro.html#compiling-all-functions-into-one",
    "title": "1  Downloading Auxillary data",
    "section": "1.5 Compiling all functions into one",
    "text": "1.5 Compiling all functions into one\nThis function\n# Main workflow function\ndef load_aux_data(data_path, cube_subset, download = True):\n\n    # Initialize GEE\n    initialize_gee()\n\n    # Create file paths and if they dont exist folders\n    germany_shp_path, corine_file_path, tif_sample_path, _, _ = create_paths(data_path=data_path)\n\n    # Download German border data \n    german_geometry = download_german_border(download=download, path=germany_shp_path)\n\n    # Download and preprocess Corine data and use germany_geometry to define the AOI\n    load_corine(path=corine_file_path, region=german_geometry, download=download)\n\n    # Create sif sample tif\n    create_sif_sample(out_path = tif_sample_path, cube_subset= cube_subset, write=download)"
  },
  {
    "objectID": "quarto_book/intro.html#run-the-script-if-its-called",
    "href": "quarto_book/intro.html#run-the-script-if-its-called",
    "title": "1  Downloading Auxillary data",
    "section": "1.2 Run the script if its called",
    "text": "1.2 Run the script if its called\n\nif __name__ == \"__main__\":\n\n    print(\"Loading auxiliary data...\")\n    \n    data_path = \"data\"\n    \n    os.makedirs(data_path, exist_ok=True)\n\n    # Create a subset of the Earth System Data Cube, containing only relevant variables and the desired spatial and temporal extent\n    cube_subset = create_cube_subset()\n\n    # Download auxiliary data (Germany border, Corine landcover data, sample tif)\n    load_aux_data(data_path, cube_subset, download = True)\n\n    print(100 * \"-\")\n\n\n\n\n\nKnuth, Donald E. 1984. “Literate Programming.” Comput. J. 27 (2): 97–111. https://doi.org/10.1093/comjnl/27.2.97."
  },
  {
    "objectID": "quarto_book/intro.html#packages-and-functions",
    "href": "quarto_book/intro.html#packages-and-functions",
    "title": "1  Downloading Auxillary data",
    "section": "1.1 Packages and Functions",
    "text": "1.1 Packages and Functions\nThis code stores 4 Functions. - 1. to initalize Google Earth Engine - 2. to download a shapefile of the German border - 3. to download Corine Landcover data from Google Earth Engine - 4. to create a sample tif of the - 5. A function that loads all\nAdditionaly\n# scripts/load_aux_data.py\n\nimport os\nimport rioxarray as rio\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport ee\nimport geemap\nfrom utils import create_paths\nfrom utils import create_cube_subset\n\n# load custom function from utils.py\n\n\n# Initialize GEE\ndef initialize_gee():\n    ee.Authenticate(force=False)\n    ee.Initialize(opt_url='https://earthengine-highvolume.googleapis.com', project='ee-forest-health')\n\n# Download German border data\ndef download_german_border(path, download=False):\n\n    print(\"Downloading German border data...\")\n\n    germany = ee.FeatureCollection('FAO/GAUL/2015/level0').filter(ee.Filter.eq('ADM0_NAME', 'Germany'))\n       \n    germany_geometry = germany.geometry()\n\n    if download:\n        geemap.ee_export_vector(germany, filename=path)\n\n    print(100 * \"-\")\n\n    return germany_geometry\n\n\n# Download and preprocess Corine data\ndef load_corine(path, region, download=True):\n\n    print(\"Processing Corine data...\")\n\n    landcover_collection = ee.ImageCollection('COPERNICUS/CORINE/V20/100m')\n\n    landcover_year = landcover_collection.filterDate(f'1999-01-01', f'2000-12-31').first()\n\n    zones = ee.Image(0) \\\n        .where(landcover_year.eq(311), 311) \\\n        .where(landcover_year.eq(312), 312) \\\n        .where(landcover_year.eq(313), 313)\n\n    print(\"Downloading Corine data\")\n\n    if download:\n        geemap.ee_export_image(zones, filename=path, crs=\"EPSG:4326\", scale=500, region=region)\n\n    print(100 * \"-\")\n\n\n# Create sif sample tif for spatial resolution and transform\ndef create_sif_sample(out_path, cube_subset, write=True):\n\n    cube_sample = cube_subset[\"sif_gosif\"].isel(time=0)\n\n    if write:\n        cube_sample.rio.to_raster(out_path)\n\n    print(\"Sample path created at:\", out_path)\n\n    print(100 * \"-\")\n\n\n\n# Main workflow function\ndef load_aux_data(data_path, cube_subset, download = True):\n\n    # Initialize GEE\n    initialize_gee()\n\n    # Create file paths and if they dont exist folders\n    germany_shp_path, corine_file_path, tif_sample_path, _, _ = create_paths(data_path=data_path)\n\n    # Download German border data \n    german_geometry = download_german_border(download=download, path=germany_shp_path)\n\n    # Download and preprocess Corine data and use germany_geometry to define the AOI\n    load_corine(path=corine_file_path, region=german_geometry, download=download)\n\n    # Create sif sample tif"
  },
  {
    "objectID": "quarto_book/01_load_aux_data.html#packages-and-functions",
    "href": "quarto_book/01_load_aux_data.html#packages-and-functions",
    "title": "2  Downloading Auxillary data",
    "section": "2.1 Packages and Functions",
    "text": "2.1 Packages and Functions\nThis code stores 5 Functions:\n\nto initialize Google Earth Engine\nto download a shapefile of the German border\nto download Corine Landcover data from Google Earth Engine\nto create a sample tif\nA function that wraps all other functions\n\nAdditionaly two functions are loaded in the beginning from utils.py\n\ncreate_paths: is used frequently over the project. It simply creates the paths reused over the analysis.\ncreate_cube_subset: this function creates the basic cube from the ESD-Cube (croping it in space, time and variables)\n\n# scripts/01_load_aux_data.py\n\nimport os\nimport rioxarray as rio\nimport matplotlib.pyplot as plt\nimport geopandas as gpd\nimport ee\nimport geemap\n\n\nfrom utils import create_paths\nfrom utils import create_cube_subset\n\n# load custom function from utils.py\n\n\n# Initialize GEE\ndef initialize_gee():\n    ee.Authenticate(force=False)\n    ee.Initialize(opt_url='https://earthengine-highvolume.googleapis.com', project='ee-forest-health')\n\n# Download German border data\ndef download_german_border(path, download=False):\n\n    print(\"Downloading German border data...\")\n\n    germany = ee.FeatureCollection('FAO/GAUL/2015/level0').filter(ee.Filter.eq('ADM0_NAME', 'Germany'))\n       \n    germany_geometry = germany.geometry()\n\n    if download:\n        geemap.ee_export_vector(germany, filename=path)\n\n    print(100 * \"-\")\n\n    return germany_geometry\n\n\n# Download and preprocess Corine data\ndef load_corine(path, region, download=True):\n\n    print(\"Processing Corine data...\")\n\n    landcover_collection = ee.ImageCollection('COPERNICUS/CORINE/V20/100m')\n\n    landcover_year = landcover_collection.filterDate(f'1999-01-01', f'2000-12-31').first()\n\n    zones = ee.Image(0) \\\n        .where(landcover_year.eq(311), 311) \\\n        .where(landcover_year.eq(312), 312) \\\n        .where(landcover_year.eq(313), 313)\n\n    print(\"Downloading Corine data\")\n\n    if download:\n        geemap.ee_export_image(zones, filename=path, crs=\"EPSG:4326\", scale=500, region=region)\n\n    print(100 * \"-\")\n\n\n# Create sif sample tif for spatial resolution and transform\ndef create_sif_sample(out_path, cube_subset, write=True):\n\n    cube_sample = cube_subset[\"sif_gosif\"].isel(time=0)\n\n    if write:\n        cube_sample.rio.to_raster(out_path)\n\n    print(\"Sample path created at:\", out_path)\n\n    print(100 * \"-\")\n\n\n\n# Main workflow function\ndef load_aux_data(data_path, cube_subset, download = True):\n\n    # Initialize GEE\n    initialize_gee()\n\n    # Create file paths and if they dont exist folders\n    germany_shp_path, corine_file_path, tif_sample_path, _, _ = create_paths(data_path=data_path)\n\n    # Download German border data \n    german_geometry = download_german_border(download=download, path=germany_shp_path)\n\n    # Download and preprocess Corine data and use germany_geometry to define the AOI\n    load_corine(path=corine_file_path, region=german_geometry, download=download)"
  },
  {
    "objectID": "quarto_book/01_load_aux_data.html#run-the-script-if-its-called",
    "href": "quarto_book/01_load_aux_data.html#run-the-script-if-its-called",
    "title": "2  Downloading Auxillary data",
    "section": "2.2 Run the script if its called",
    "text": "2.2 Run the script if its called\n\n\n\nif __name__ == \"__main__\":\n\n    print(\"Loading auxiliary data...\")\n    \n    data_path = \"data\"\n    \n    os.makedirs(data_path, exist_ok=True)\n\n    # Create a subset of the Earth System Data Cube, containing only relevant variables and the desired spatial and temporal extent\n    cube_subset = create_cube_subset()\n\n    # Download auxiliary data (Germany border, Corine landcover data, sample tif)\n    load_aux_data(data_path, cube_subset, download = True)"
  }
]